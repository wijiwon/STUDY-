// 로또 추첨기계 만들어보자



// 로또 번호들이 들어갈 로또 박스
let lottoNum = [];

// 추첨 결과를 담을 변수
let res = [];

/* 작업 순서
1. 로또는 겹치는 숫자가 없어야한다.
2. 숫자가 6개
3. 나온 숫자들의 결과를 노출
*/

/*  행 44 ~ 51 까지의 "추첨 전 세팅" 함수와 동일한 동작을 하는 구문
// 로또의 번호를 모두 뽑아놓고 가져다 사용하자
for (let i = 1; i <= 45; i++) {                          //1~45번 까지 반복
    // 1~45까지의 숫자를 배열에 담아준다.
    lottoNum.push(i);    
    console.log(lottoNum);
}
*/


/* 행 52~ 70까지의 "로또추첨 실행" 함수와 동일한 동작을 하는 구문
for (let i = 0; i < 6; i++) {
    // 0~44까지의 랜덤한 숫자를 뽑고 인덱스로 사용.
    let rndIndex = Math.floor(Math.random() * lottoNum.length)         //floor: 값의 소숫점 단위를 버린다. 예) 값: 5.7  floor의 값: 5    

    let number = lottoNum[rndIndex];                                   // 랜덤으로 뽑은인덱스를 가지고 lottoNum배열에 인덱스로 전달해서 number라는 변수에 담아놓자 (사용하기 위해서)


    // 램덤한 값이 또 나오지 않게 하기 위해서
    //배열에서 값을 제거하려면 어떻게 해야할까?
    //배열의 메소드 splice 함수를 사용하면 된다.
    //시작점(인덱스), 그 시작점으로 부터 몇 개를 제거할 것인지를 매개변수로 저달
    lottoNum.splice(rndIndex,1);        //인덱스에 해당하는 값 하나만 제거. 해당 배열에서 값이 제거되면 길이가 줄어들기 때문에 랜덤값을 구하는 과정에서도 
                                        // lottoNum.length 길이 값이 줄어들기 때문에 정상적으로 작동한다.
    res.push(number);                   //결과값을 담아둔다. 
}
*/



// 추첨 전에 세팅작업
function lottoInit(){
    lottoNum = [];          //배열 초기화. 배열의 값을 추가하는 작업은 초기화를 해야하는지 확인을 꼭 하고 작업을 진행해야 한다.
    for (let i = 1; i <= 45; i++) {                          //1~45번 까지 반복
        // 1~45까지의 숫자를 배열에 담아준다.
        lottoNum.push(i);    
    }
    console.log("Init함수 실행 lotto세팅 끝"+lottoNum);
}

//로또 추첨 실행 함수
function lottoPlay(){
    res = [];           //배열 초기화. 초기화 하지 않으면 해당 함수를 두 번 이상 돌렸을 때 이전 값이 누적되어 노출되기 때문이다.
    for (let i = 0; i < 6; i++) {
        // 0~44까지의 랜덤한 숫자를 뽑고 인덱스로 사용.
        let rndIndex = Math.floor(Math.random() * lottoNum.length)         //floor: 값의 소숫점 단위를 버린다. 예) 값: 5.7  floor의 값: 5
    
        let number = lottoNum[rndIndex];                                   // 랜덤으로 뽑은 인덱스를 가지고 lottoNum배열에 인덱스로 전달해서 number라는 변수에 담아놓자 (사용하기 위해서)
    
    
        // 램덤한 값이 또 나오지 않게 하기 위해서 배열에서 값을 제거하려면 어떻게 해야할까?
        // 배열의 메소드 splice 함수를 사용하면 된다.
        // 시작점(인덱스), 그 시작점으로 부터 몇 개를 제거할 것인지를 매개변수로 저달
        lottoNum.splice(rndIndex,1);        // 인덱스에 해당하는 값 하나만 제거. 해당 배열에서 값이 제거되면 길이가 줄어들기 때문에 랜덤값을 구하는 과정에서도 
                                            // lottoNum.length 길이 값이 줄어들기 때문에 정상적으로 작동한다.
        res.push(number);                   // 결과값을 담아둔다. 
    }
}

function main(){
    //로또 세팅하고(함수실행문)
    lottoInit();

    //로또 추첨하자(함수실행문)
    lottoPlay();

    console.log("로또 결과는? "+res);
}

// 함수 초기화나 play같은 위의 코드처럼 단위별로 기능을 정리해두었을때 단위별로 버그가 없는지 단위 테스트가 가능하다.
// 단위별 기능 오류가 없게 되면 통합 테스트 진행할 수 있다. (전체적 기능이 오류가 없는지)


//전체 기능이 들어있는 함수를 만들고 함수가 실행될 때 마다 해당 기능이 동작할 수 있게 재사용성을 높일 수 있다.


main();
main();         // 이전 동작과는 전혀 다른 숫자들이 랜덤으로 선택되어 표기된다.

// 이렇게 단위 통합으로 작업을 정리해두는 습관을 길러야한다.

